CREATE OR REPLACE PACKAGE BODY sa.SP_MOBILE_BILLING AS
/***************************************************************************************************/
--$RCSfile: SP_MOBILE_BILLING_PKG_BODY.sql,v $
--$Revision: 1.31 $
--$Author: akhan $
--$Date: 2017/02/01 20:39:30 $
--$ $Log: SP_MOBILE_BILLING_PKG_BODY.sql,v $
--$ Revision 1.31  2017/02/01 20:39:30  akhan
--$ Data Club defects
--$
--$ Revision 1.30  2016/09/27 17:29:12  ddudhankar
--$ Updated for ACH
--$
--$ Revision 1.29  2016/09/24 15:44:53  vlaad
--$ Updated for data club
--$
--$ Revision 1.26  2015/02/02 20:20:35  apuritipati
--$ CR31367 - Made changes as part of Webcommerce Payment History.
--$
--$ Revision 1.25  2015/02/02 18:02:53  apuritipati
--$ CR31367 - Made changes as part of WebCommerce PaymentHistory
--$
--$ Revision 1.24  2015/01/22 14:35:48  gsaragadam
--$ CR31367 to fix CC registration issue
--$
--$ Revision 1.23  2015/01/21 16:45:45  gsaragadam
--$ CR31367 to fix CC registration issue
--$
--$ Revision 1.20  2015/01/02 20:27:19  pvenkata
--$ update
--$
--$ Revision 1.19  2014/12/17 13:48:09  bkayal
--$ Commited for CR31367
--$
--$ Revision 1.18  2014/12/12 16:32:42  bkayal
--$ Modified get_Device_Info procedure for some defects
--$
--$ Revision 1.17  2014/12/03 17:11:12  bkayal
--$ Added some functionality
--$
--$ Checked in on behalf  of WebCommerce team
--$
--$ Revision 1.16  2014/12/02 16:50:19  bkayal
--$ Modifed for Some defects--Checd in on behalf of Deepti
--$
--$ Revision 1.13  2014/09/25 13:35:48  dtunk
--$ Updated for CR28413 - web commerce for processing two new fields x_subscriptiontype , x_subscriptionunits
--$
--$ Revision 1.12  2014/09/23 19:54:53  dtunk
--$ Updated for CR28413 - web commerce for processing two new fields x_vendor_id , x_client_id
--$
--$ Revision 1.11  2014/09/22 14:57:07  dtunk
--$ Rounding up the TAX_AMOUNT in proc - CALCTAX_VAS
--$
--$ Revision 1.10  2014/09/18 23:33:03  dtunk
--$ Updated get_device_info proc - calling the is_b2b from B2B_PKG package
--$
--$ Revision 1.9  2014/09/17 23:56:14  dtunk
--$ Added the comments block
--$
--$
--$ Revision 1.0  2014/02/26 20:26:10  dtunk
--$ CR24813 - Web Commerce
--$
/***************************************************************************************************/
  /*===============================================================================================*/
  /*                                                                                               */
  /* PURPOSE  : Package has been developed to mobile billing Db operation             */
  /*                                    */
  /*                                                                                               */
  /* REVISIONS  DATE       WHO            PURPOSE                                                  */
  /* --------------------------------------------------------------------------------------------- */
  /*            10/17/14   dtunk     CR28413: Web commerce */
  /*===============================================================================================*/

PROCEDURE INSERT_PURCHASE_DETAILS (
------------X_PROGRAM_PURCH_HDR
 IP_X_RQST_SOURCE           IN VARCHAR2,
 IP_X_RQST_TYPE             IN VARCHAR2,
 IP_X_ICS_APPLICATIONS      IN VARCHAR2,
 IP_X_MERCHANT_ID           IN VARCHAR2,
 IP_X_MERCHANT_REF_NUMBER   IN VARCHAR2,
 IP_X_OFFER_NUM             IN VARCHAR2,
 IP_X_QUANTITY              IN NUMBER,
 IP_X_MERCHANT_PRODUCT_SKU  IN VARCHAR2,
 IP_X_PRODUCT_CODE          IN VARCHAR2,
 IP_X_IGNORE_AVS            IN VARCHAR2,
 IP_X_CUSTOMER_HOSTNAME     IN VARCHAR2,
 IP_X_CUSTOMER_IPADDRESS    IN VARCHAR2,
 IP_X_CUSTOMER_PHONE        IN VARCHAR2,
 IP_X_STATUS                IN VARCHAR2,
 IP_X_ESN                   IN VARCHAR2,
 IP_X_AMOUNT                IN NUMBER,
 IP_X_TAX_AMOUNT            IN NUMBER,
 IP_PURCH_HDR2CREDITCARD    IN NUMBER,
 IP_PROG_HDR2X_PYMT_SRC     IN NUMBER,
 IP_PROG_HDR2WEB_USER       IN NUMBER,
 IP_X_PAYMENT_TYPE          IN VARCHAR2,
 IP_X_E911_TAX_AMOUNT       IN NUMBER,
 IP_X_USF_TAXAMOUNT         IN NUMBER,
 IP_X_RCRF_TAX_AMOUNT       IN NUMBER,
 IP_X_DISCOUNT_AMOUNT       IN NUMBER,
 IP_X_BILL_ZIP              IN VARCHAR2,
 ------------X_PROGRAM_PURCH_HDR
 ------------X_PROGRAM_PURCH_DTL
 IP_X_CHARGE_DESC           IN VARCHAR2,
 ------------X_PROGRAM_PURCH_DTL
 ------------X_CONTENT_PURCH_DTL
 IP_X_ITEM_NAME             IN VARCHAR2,
 IP_X_CAT                   IN VARCHAR2,
 IP_X_SUBCAT                IN VARCHAR2,
 IP_X_ARTIST                IN VARCHAR2,
 IP_X_CHANNEL               IN VARCHAR2,
 IP_X_RETAILER_ID           IN VARCHAR2,
 IP_X_DELIVERY_STATUS       IN VARCHAR2,
 IP_CONTENT_PROVIDER        IN VARCHAR2,
 IP_ORDER_ID                IN VARCHAR2,
 IP_X_PART_NUM              IN VARCHAR2,
 IP_X_VENDOR_ID             IN VARCHAR2,
 IP_X_CLIENT_ID             IN VARCHAR2,
 IP_X_SUBSCRIPTION_TYPE     IN VARCHAR2,
 IP_X_SUBSCRIPTION_UNITS    IN NUMBER,
 ------------X_CONTENT_PURCH_DTL
 OP_PROGRAM_PURCHHDR_OBJID  OUT NUMBER,
 OP_ERRORNUM                OUT VARCHAR2,
 OP_ERRORMSG                OUT VARCHAR2,
 IP_IS_DATACLUB             IN VARCHAR2 DEFAULT 'N'
 ) IS

 V_ID_NUMBER  NUMBER;
 V_FIRST_NAME VARCHAR2(255);
 V_LAST_NAME  VARCHAR2(255);
 V_E_MAIL     VARCHAR2(255);
 V_ADDRESS_1  VARCHAR2(255);
 V_ADDRESS_2  VARCHAR2(255);
 V_CITY       VARCHAR2(255);
 V_STATE      VARCHAR2(255);
 V_ZIPCODE    VARCHAR2(255);
 V_COUNTRY    VARCHAR2(255);
 n_ach_objid  number;
 v_phone      varchar2(50);
 N_PGMENRL_OBJID NUMBER;

 BEGIN
 OP_ERRORNUM := '0';
 OP_ERRORMSG := '';

 if   IP_PROG_HDR2X_PYMT_SRC is null
   or IP_PROG_HDR2WEB_USER  is null then
   util_pkg.insert_error_tab_proc(ip_action => 'Invalid Input parameters',
                                   ip_key =>    ip_x_esn,
                                   ip_program_name => 'SP_MOBILE_BILLING.INSERT_PURCHASE_DETAILS',
                                   ip_error_text => 'VAlidate input Exception ');
    --For now do not return
 end if;

 SELECT SEQ_X_PROGRAM_PURCH_HDR.NEXTVAL
 INTO   V_ID_NUMBER
 FROM   DUAL;


  if IP_IS_DATACLUB = 'Y' and IP_PURCH_HDR2CREDITCARD is null then
             SELECT pymt_src2x_bank_account
             into   n_ach_objid
             FROM   x_payment_source
             where objid  = ip_prog_hdr2x_pymt_src;

             select tc.s_first_name,
                    tc.s_last_name,
                    tc.e_mail,
                    tc.address_1,
                    tc.address_2,
                    tc.city,
                    tc.state,
                    tc.zipcode,
                    tc.country,
                    tb.x_customer_phone
             into   v_first_name,
                    v_last_name,
                    v_e_mail,
                    v_address_1,
                    v_address_2,
                    v_city,v_state,
                    v_zipcode,
                    v_country,
                    v_phone
             from   table_x_bank_account tb,
                    table_contact tc
             where
             tc.objid = tb.X_BANK_ACCT2CONTACT
             and tb.objid = n_ach_objid;
 else
           --get cust contact info using cc objid
           select nvl(tc.s_first_name,'NoReal'),
                  nvl(tc.s_last_name,'Name'),
                  tc.e_mail,
                  nvl(tc.address_1,'No Address Provided'),
                  nvl(tc.address_2,'No Address Provided'),
                  tc.city,
                  tc.state,
                  tc.zipcode,
                  nvl(tc.country,'USA'),
                  tcc.x_customer_phone
           into   v_first_name,
                  v_last_name,
                  v_e_mail,
                  v_address_1,
                  v_address_2,
                  v_city,v_state,
                  v_zipcode,
                  v_country,
                  v_phone
           from   table_contact tc,
                  table_x_credit_card tcc
           where 1=1
           and   tcc.x_credit_card2contact = tc.objid
           and   tcc.objid = ip_purch_hdr2creditcard;
 end if;

 /*** X_PROGRAM_PURCH_HDR ****/
 INSERT INTO X_PROGRAM_PURCH_HDR (
              OBJID,
              X_RQST_SOURCE,
              X_RQST_TYPE,
              X_RQST_DATE,
              X_ICS_APPLICATIONS,
              X_MERCHANT_ID,
              X_MERCHANT_REF_NUMBER,
              X_OFFER_NUM,
              X_QUANTITY,
              X_MERCHANT_PRODUCT_SKU,
              X_PRODUCT_CODE,
              X_IGNORE_AVS,
              X_CUSTOMER_HOSTNAME,
              X_CUSTOMER_IPADDRESS,
              X_CUSTOMER_FIRSTNAME,
              X_CUSTOMER_LASTNAME,
              X_CUSTOMER_PHONE,
              X_CUSTOMER_EMAIL,
              X_STATUS,
              X_BILL_ADDRESS1,
              X_BILL_ADDRESS2,
              X_BILL_CITY,
              X_BILL_STATE,
              X_BILL_ZIP,
              X_BILL_COUNTRY,
              X_ESN,
              X_AMOUNT,
              X_TAX_AMOUNT,
              PURCH_HDR2CREDITCARD,
              PROG_HDR2X_PYMT_SRC,
              PROG_HDR2WEB_USER,
              X_PAYMENT_TYPE,
              X_E911_TAX_AMOUNT,
              X_USF_TAXAMOUNT,
              X_RCRF_TAX_AMOUNT,
              X_PROCESS_DATE,
              X_DISCOUNT_AMOUNT,
              X_BILL_AMOUNT,
              X_USER
             )
 VALUES
           (
            V_ID_NUMBER,
            IP_X_RQST_SOURCE,
            IP_X_RQST_TYPE,
            SYSDATE,
            IP_X_ICS_APPLICATIONS,
            IP_X_MERCHANT_ID,
            IP_X_MERCHANT_REF_NUMBER,
            IP_X_OFFER_NUM,
            IP_X_QUANTITY,
            IP_X_MERCHANT_PRODUCT_SKU,
            IP_X_PRODUCT_CODE,
            IP_X_IGNORE_AVS,
            IP_X_CUSTOMER_HOSTNAME,
            IP_X_CUSTOMER_IPADDRESS,
            V_FIRST_NAME,
            V_LAST_NAME,
            IP_X_CUSTOMER_PHONE,
            V_E_MAIL,
            IP_X_STATUS,
            V_ADDRESS_1,
            V_ADDRESS_2,
            V_CITY,
            V_STATE,
            IP_X_BILL_ZIP,
            V_COUNTRY,
            IP_X_ESN ,
            ROUND(IP_X_AMOUNT,2),
            ROUND(IP_X_TAX_AMOUNT,2),
            nvl(IP_PURCH_HDR2CREDITCARD,n_ach_objid),
            IP_PROG_HDR2X_PYMT_SRC,
            IP_PROG_HDR2WEB_USER,
            IP_X_PAYMENT_TYPE,
            ROUND(IP_X_E911_TAX_AMOUNT,2),
            ROUND(IP_X_USF_TAXAMOUNT,2),
            ROUND(IP_X_RCRF_TAX_AMOUNT,2),
            SYSDATE,
            ROUND(IP_X_DISCOUNT_AMOUNT,2),
            ROUND(IP_X_AMOUNT,2),
            'web2'
          );

 --43498 Added condition to skip COMMIT for data club
 IF nvl(IP_IS_DATACLUB,'N') ='N' THEN
  COMMIT;
 else
 -- get pgmenrolled objid
 select objid
 INTO   n_pgmenrl_objid
 from   x_program_enrolled
 where  x_esn = IP_X_ESN
 and    x_enrollment_status      = 'ENROLLED'
 AND    pgm_enroll2pgm_parameter = (
                                      select objid
                                      from   x_program_parameters pp
                                      where  pp.x_program_name like '%Data Club Plan%B2B%'
                                      and    x_charge_frq_code ='LOWBALANCE'
                                     );

 END IF;



 OP_PROGRAM_PURCHHDR_OBJID := V_ID_NUMBER;
 /*** X_PROGRAM_PURCH_DTL ****/
 SELECT SEQ_X_PROGRAM_PURCH_DTL.NEXTVAL
 INTO   V_ID_NUMBER
 FROM   DUAL;

 INSERT INTO X_PROGRAM_PURCH_DTL (
  OBJID,
  X_ESN,
  X_AMOUNT,
  X_CHARGE_DESC,
  X_CYCLE_START_DATE,
  X_CYCLE_END_DATE,
  PGM_PURCH_DTL2PROG_HDR,
  X_TAX_AMOUNT,
  X_E911_TAX_AMOUNT,
  X_USF_TAXAMOUNT,
  X_RCRF_TAX_AMOUNT,
  PGM_PURCH_DTL2PGM_ENROLLED
 )
 VALUES
 (
  V_ID_NUMBER,
  IP_X_ESN,
  ROUND(IP_X_AMOUNT,2),
  IP_X_CHARGE_DESC,
  SYSDATE,
  SYSDATE,
  OP_PROGRAM_PURCHHDR_OBJID,
  ROUND(IP_X_TAX_AMOUNT,2),
  ROUND(IP_X_E911_TAX_AMOUNT,2),
  ROUND(IP_X_USF_TAXAMOUNT,2),
  ROUND(IP_X_RCRF_TAX_AMOUNT,2),
  N_PGMENRL_OBJID
 );

 --43498 Added condition to skip COMMIT AND CONTENT_PURCH_DTL INSERT FOR  data club
IF nvl(IP_IS_DATACLUB,'N') = 'N' THEN
  COMMIT;
  /*** X_CONTENT_PURCH_DTL  ****/
  SELECT SEQU_X_CONTENT_PURCH_DTL.NEXTVAL
  INTO   V_ID_NUMBER
  FROM   DUAL;

  INSERT INTO X_CONTENT_PURCH_DTL (
   OBJID,
   X_CONTENT2PGM_PURCH_HDR,
   X_ITEM_NAME,
   X_CAT,
   X_SUBCAT,
   X_ARTIST,
   X_CHANNEL,
   X_RETAILER_ID,
   X_DELIVERY_STATUS,
   CONTENT_PROVIDER,
   ORDER_ID,
   ORDER_TIMESTAMP,
   X_PART_NUM,
   X_VENDOR_ID,
   X_CLIENT_ID,
   X_SUBSCRIPTION_TYPE,
   X_SUBSCRIPTION_UNITS,
   X_TC_ACCEPTED,
   X_IP_ADDRESS
  )
  VALUES
  (
   V_ID_NUMBER,
   OP_PROGRAM_PURCHHDR_OBJID,
   IP_X_ITEM_NAME,
   IP_X_CAT,
   IP_X_SUBCAT,
   IP_X_ARTIST,
   IP_X_CHANNEL,
   IP_X_RETAILER_ID,
   IP_X_DELIVERY_STATUS,
   IP_CONTENT_PROVIDER,
   IP_ORDER_ID,
   SYSDATE,
   IP_X_PART_NUM,
   IP_X_VENDOR_ID,
   IP_X_CLIENT_ID,
   IP_X_SUBSCRIPTION_TYPE,
   IP_X_SUBSCRIPTION_UNITS,
   'YES',
   IP_X_CUSTOMER_IPADDRESS
  );

  COMMIT;
 END IF;

 EXCEPTION
  WHEN OTHERS
  THEN
  OP_ERRORNUM :=  SQLCODE;
  OP_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
  INSERT
  INTO X_PROGRAM_ERROR_LOG(
  X_SOURCE,
  X_ERROR_CODE,
  X_ERROR_MSG,
  X_DATE,
  X_DESCRIPTION,
  X_SEVERITY
  )VALUES(
  'SP_MOBILE_BILLING.INSERT_PURCHASE_DETAILS',
  OP_ERRORNUM,
  OP_ERRORMSG,
  SYSDATE,
  'SP_MOBILE_BILLING.INSERT_PURCHASE_DETAILS',
  2 -- MEDIUM
  );
 END;

/*=============== PROCEDURE GET_PROGRAM_PURCHASE_STATUS ===============*/
PROCEDURE GET_PROGRAM_PURCHASE_STATUS (
IP_ORDER_ID      IN VARCHAR2,
IP_VENDOR_ID      IN VARCHAR2,
IP_CLIENT_ID      IN VARCHAR2,
OP_X_STATUS      OUT VARCHAR2,
OP_RESPCODE      OUT VARCHAR2,
OP_RESPMSG      OUT VARCHAR2) IS
V_ERRORMSG VARCHAR2(100);
V_ERRORNUM VARCHAR2(100);
BEGIN
OP_RESPCODE := '0';
OP_RESPMSG := '';
SELECT H.X_STATUS INTO OP_X_STATUS
FROM X_PROGRAM_PURCH_HDR H
WHERE H.OBJID = (
SELECT MAX(HDR.OBJID)
FROM X_PROGRAM_PURCH_HDR HDR, X_CONTENT_PURCH_DTL CNT
WHERE HDR.OBJID=CNT.X_CONTENT2PGM_PURCH_HDR
AND CNT.ORDER_ID=IP_ORDER_ID AND lower(CNT.X_VENDOR_ID)=lower(IP_VENDOR_ID) AND lower(CNT.X_CLIENT_ID)=lower(IP_CLIENT_ID));

IF OP_X_STATUS IS NOT NULL AND OP_X_STATUS = 'PROCESSING' THEN
   OP_RESPMSG := 'PROCESSING';
   OP_RESPCODE := '1';
ELSIF OP_X_STATUS IS NOT NULL AND OP_X_STATUS = 'SUCCESS' THEN
   OP_RESPMSG := 'SUCCESS';
   OP_RESPCODE := '0';
ELSIF OP_X_STATUS IS NOT NULL AND OP_X_STATUS = 'FAILED' THEN
   OP_RESPMSG := 'FAILED';
   OP_RESPCODE := '2';
END IF;


EXCEPTION
  WHEN OTHERS
  THEN
         OP_X_STATUS := 'INVALID';
         OP_RESPCODE := '3';
         OP_RESPMSG :='This order does not exist.';

         V_ERRORNUM := SQLCODE;
         V_ERRORMSG:= SQLCODE || SUBSTR (SQLERRM, 1, 100);

         INSERT INTO sa.X_PROGRAM_ERROR_LOG
   (X_SOURCE,
            X_ERROR_CODE,
            X_ERROR_MSG,
            X_DATE,
            X_DESCRIPTION,
            X_SEVERITY)
   VALUES
   ('SP_MOBILE_BILLING.GET_PURCH_STATUS',
            V_ERRORNUM,
            V_ERRORMSG,
            SYSDATE,
            'SP_MOBILE_BILLING.GET_PURCH_STATUS',
            2 -- MEDIUM
         );
END;


/*=============== PROCEDURE GET_DEVICE_INFO ===============*/
PROCEDURE GET_DEVICE_INFO (
    P_IPMIN   IN VARCHAR2,
    P_BALANCE IN NUMBER,
    P_BILLING_DIRECTION OUT VARCHAR2,
    P_RESOLUTION_URL OUT VARCHAR2,
    P_MIN OUT VARCHAR2,
 P_OPESN OUT VARCHAR2,
    P_DELIVERY_METHOD OUT VARCHAR2,
    P_MANUFACTURER OUT VARCHAR2,
    P_MODEL OUT VARCHAR2,
    P_PART_CLASS OUT VARCHAR2,
    P_PPE_ENABLED OUT VARCHAR2,
    P_TOOLKIT_VERSION OUT VARCHAR2,
    P_DEVICE_OS OUT VARCHAR2,
    P_BACKBONE_CARRIER OUT VARCHAR2,
    P_CONVERSION_FACTOR OUT VARCHAR2,
    P_ACCOUNT_ID OUT VARCHAR2,
    P_DEALER_ID OUT VARCHAR2,
    P_DUE_DATE OUT VARCHAR2,
    P_BRAND OUT VARCHAR2,
    P_CHARGE_UNIT_TYPE OUT VARCHAR2,
    P_ASSOCIATED_ACCOUNT OUT VARCHAR2,
    OP_ERR_NUM OUT NUMBER,
    OP_ERR_STRING OUT VARCHAR2)
IS
 P_ESN VARCHAR2(50);
  V_IS_B2B NUMBER;
BEGIN
 OP_ERR_NUM    := 0;
 OP_ERR_STRING := 'SUCCESS';
 P_ESN := '';
  IF (P_IPMIN IS NOT NULL) THEN
   SELECT TPIESN.PART_SERIAL_NO
   INTO P_ESN
   FROM TABLE_PART_INST TPIESN
   LEFT JOIN TABLE_PART_INST TPIMIN ON (TPIESN.OBJID = TPIMIN.PART_TO_ESN2PART_INST)
   LEFT JOIN TABLE_MOD_LEVEL ML ON (ML.OBJID = TPIESN.N_PART_INST2PART_MOD)
   LEFT JOIN TABLE_PART_NUM PN ON (ML.PART_INFO2PART_NUM = PN.OBJID)
   LEFT JOIN TABLE_BUS_ORG ORG ON (ORG.OBJID = PN.PART_NUM2BUS_ORG)
   WHERE  TPIESN.X_DOMAIN = 'PHONES'
   AND TPIMIN.X_DOMAIN = 'LINES'
   AND TPIMIN.PART_SERIAL_NO = P_IPMIN;

   P_OPESN := P_ESN;
   IF (P_ESN IS NOT NULL) THEN
    GET_HANDSETINFO_PRC(P_ESN,P_BALANCE,P_BILLING_DIRECTION,P_RESOLUTION_URL,P_MIN,P_DELIVERY_METHOD,P_MANUFACTURER,P_MODEL,P_PART_CLASS,P_PPE_ENABLED,P_TOOLKIT_VERSION,P_DEVICE_OS,P_BACKBONE_CARRIER,P_CONVERSION_FACTOR,P_ACCOUNT_ID,P_DEALER_ID,P_DUE_DATE,P_BRAND,P_CHARGE_UNIT_TYPE,P_ASSOCIATED_ACCOUNT,OP_ERR_NUM,OP_ERR_STRING);
   ELSE
    P_RESOLUTION_URL := '';
    P_MIN := '';
    P_DELIVERY_METHOD := '';
    P_MANUFACTURER := '';
    P_MODEL := '';
    P_PART_CLASS := '';
    P_PPE_ENABLED := '';
    P_TOOLKIT_VERSION := '';
    P_DEVICE_OS := '';
    P_BACKBONE_CARRIER := '';
    P_CONVERSION_FACTOR := '';
    P_ACCOUNT_ID := '';
    P_DEALER_ID := '';
    P_DUE_DATE := '';
    P_BRAND := '';
    P_CHARGE_UNIT_TYPE := '';
    P_ASSOCIATED_ACCOUNT := '';
    OP_ERR_NUM := -1;
    OP_ERR_STRING := 'INVALID ESN FOR GIVEN INPUT MIN';
   END IF;

       --ip_type = MIN
        V_IS_B2B:= B2B_PKG.is_b2b('MIN',P_ESN,'',OP_ERR_NUM, OP_ERR_STRING);
        IF V_IS_B2B = 1 THEN
          P_ACCOUNT_ID := '';
        END IF;

     /* Commented as this is  been handled at java end for CR: 31367
  IF P_BRAND = 'STRAIGHT_TALK' THEN
      P_BRAND := 'STRAIGHTTALK';
    ELSIF P_BRAND = 'SIMPLE_MOBILE' THEN
      P_BRAND := 'SIMPLEMOBILE';
    END IF;*/

  ELSE
   P_RESOLUTION_URL := '';
   P_MIN := '';
   P_DELIVERY_METHOD := '';
   P_MANUFACTURER := '';
   P_MODEL := '';
   P_PART_CLASS := '';
   P_PPE_ENABLED := '';
   P_TOOLKIT_VERSION := '';
   P_DEVICE_OS := '';
   P_BACKBONE_CARRIER := '';
   P_CONVERSION_FACTOR := '';
   P_ACCOUNT_ID := '';
   P_DEALER_ID := '';
   P_DUE_DATE := '';
   P_BRAND := '';
   P_CHARGE_UNIT_TYPE := '';
   P_ASSOCIATED_ACCOUNT := '';
   OP_ERR_NUM := -1;
   OP_ERR_STRING := 'INVALID MIN';
  END IF;
  EXCEPTION
   WHEN OTHERS
   THEN
    OP_ERR_NUM := SQLCODE;
    OP_ERR_STRING := SQLCODE || SUBSTR (SQLERRM, 1, 100);
    INSERT INTO sa.TABLE_X_CBO_ERROR
    (OBJID,
    X_ESN_IMEI,
    X_SOURCE_SYSTEM,
    X_CBO_METHOD,
    X_ERROR_STRING,
    X_ERROR_DATE,
    X_PROMO_CODE,
    X_RED_CARD,
    X_ZIP_CODE)
    VALUES
    (sa.SEQ('X_CBO_ERROR'),
    NULL,
    'SP_MOBILE_BILLING',
    'GET_DEVICE_INFO',
    OP_ERR_STRING,
    SYSDATE,
    NULL,
    NULL,
    NULL
    );
 END;


/** ===== UPDATE_CARD_STATUS =======**/
FUNCTION UPDATE_CARD_STATUS (
IP_X_CUSTOMER_CC_NUMBER  IN VARCHAR2,
IP_X_CARD_STATUS          IN VARCHAR2
)
RETURN VARCHAR2
IS
V_STATUS VARCHAR2(255);
V_ERRORNUM VARCHAR2(255);
V_ERRORMSG VARCHAR2(4000);

BEGIN

  UPDATE TABLE_X_CREDIT_CARD
  SET X_CARD_STATUS='ACTIVE'
  WHERE X_CARD_STATUS = IP_X_CARD_STATUS
  AND  X_CUSTOMER_CC_NUMBER = IP_X_CUSTOMER_CC_NUMBER;

  Select X_CARD_STATUS into V_STATUS  from TABLE_X_CREDIT_CARD;
EXCEPTION
WHEN OTHERS
THEN
V_ERRORNUM :=  SQLCODE;
V_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
INSERT INTO sa.TABLE_X_CBO_ERROR
 (OBJID,
 X_ESN_IMEI,
 X_SOURCE_SYSTEM,
 X_CBO_METHOD,
 X_ERROR_STRING,
 X_ERROR_DATE,
 X_PROMO_CODE,
 X_RED_CARD,
 X_ZIP_CODE)
 VALUES
 (sa.SEQ('X_CBO_ERROR'),
 NULL,
 'SP_MOBILE_BILLING',
 'UPDATE_CARD_STATUS',
 V_ERRORMSG,
 SYSDATE,
 NULL,
 NULL,
 NULL
 );
RETURN V_STATUS;
END ;


/*=============== PROCEDURE UPDATE_PROGRAM_PURCH_HDR ===============*/
 PROCEDURE UPDATE_PROGRAM_PURCH_HDR (
  IP_X_PROGRAM_PURCH_HDR_OBJID IN NUMBER,
  IP_X_STATUS                  IN VARCHAR2,
  IP_X_REQUEST_ID              IN VARCHAR2,
  IP_X_AUTH_REQUEST_ID         IN VARCHAR2,
  IP_X_AUTH_CODE               IN VARCHAR2,
  IP_X_AUTH_TYPE               IN VARCHAR2,
  IP_X_AUTH_AVS                IN VARCHAR2,
  IP_X_AUTH_RESPONSE           IN VARCHAR2,
  IP_X_AUTH_TIME               IN VARCHAR2,
  IP_X_AUTH_RCODE              IN NUMBER,
  IP_X_AUTH_RFLAG              IN VARCHAR2,
  IP_X_AUTH_RMSG               IN VARCHAR2,
  IP_X_AUTH_AMOUNT             IN NUMBER,
  IP_X_ICS_RCODE               IN VARCHAR2,
  IP_X_ICS_RFLAG               IN VARCHAR2,
  IP_X_ICS_RMSG                IN VARCHAR2,
  IP_X_BILL_REQUEST_TIME       IN VARCHAR2,
  IP_X_BILL_RCODE              IN NUMBER,
  IP_X_BILL_RFLAG              IN VARCHAR2,
  IP_X_BILL_RMSG               IN VARCHAR2,
  IP_X_BILL_TRANS_REF_NO       IN VARCHAR2,
  IP_X_BILL_AMOUNT             IN NUMBER,
  OP_ERRORNUM                  OUT VARCHAR2,
  OP_ERRORMSG                  OUT VARCHAR2,
  IP_IS_DATACLUB               IN VARCHAR2 DEFAULT 'N')
 IS
  V_STATUS VARCHAR2(10);
  BEGIN
   OP_ERRORNUM := '0';
   OP_ERRORMSG := '';
   V_STATUS := '';
   IF IP_X_ICS_RCODE = 1 OR IP_X_ICS_RCODE = 100 THEN
    V_STATUS := 'SUCCESS';
   ELSE
    V_STATUS := 'FAILED';
   END IF;
   IF V_STATUS = '' THEN
     V_STATUS := IP_X_STATUS;
   END IF;

   IF nvl(IP_IS_DATACLUB,'N') = 'N' THEN
   UPDATE X_PROGRAM_PURCH_HDR SET
   X_REQUEST_ID         = IP_X_REQUEST_ID,
   X_AUTH_REQUEST_ID    = IP_X_AUTH_REQUEST_ID,
   X_AUTH_CODE          = IP_X_AUTH_CODE,
   X_AUTH_TYPE          = IP_X_AUTH_TYPE,
   X_AUTH_AVS           = IP_X_AUTH_AVS,
   X_AUTH_RESPONSE      = IP_X_AUTH_RESPONSE,
   X_AUTH_TIME          = IP_X_AUTH_TIME,
   X_AUTH_RCODE         = IP_X_AUTH_RCODE,
   X_AUTH_RFLAG         = IP_X_AUTH_RFLAG,
   X_AUTH_RMSG          = IP_X_AUTH_RMSG,
   X_AUTH_AMOUNT        = IP_X_AUTH_AMOUNT,
   X_ICS_RCODE          = IP_X_ICS_RCODE,
   X_ICS_RFLAG          = IP_X_ICS_RFLAG,
   X_ICS_RMSG           = IP_X_ICS_RMSG,
   X_BILL_REQUEST_TIME  = IP_X_BILL_REQUEST_TIME,
   X_BILL_RCODE         = IP_X_BILL_RCODE,
   X_BILL_RFLAG         = IP_X_BILL_RFLAG,
   X_BILL_RMSG          = IP_X_BILL_RMSG,
   X_BILL_TRANS_REF_NO  = IP_X_BILL_TRANS_REF_NO,
   X_BILL_AMOUNT        = IP_X_BILL_AMOUNT,
   X_STATUS             = V_STATUS
   WHERE OBJID = IP_X_PROGRAM_PURCH_HDR_OBJID;
   COMMIT;

   UPDATE X_CONTENT_PURCH_DTL DTL SET
   X_DELIVERY_STATUS             = V_STATUS
   WHERE X_CONTENT2PGM_PURCH_HDR = IP_X_PROGRAM_PURCH_HDR_OBJID;
   COMMIT;

  ELSE
   UPDATE X_PROGRAM_PURCH_HDR SET
    X_REQUEST_ID         = NVL(IP_X_REQUEST_ID,X_REQUEST_ID),
    X_AUTH_REQUEST_ID    = NVL(IP_X_AUTH_REQUEST_ID,X_AUTH_REQUEST_ID),
    X_AUTH_CODE          = NVL(IP_X_AUTH_CODE,X_AUTH_CODE),
    X_AUTH_TYPE          = NVL(IP_X_AUTH_TYPE,X_AUTH_TYPE),
    X_AUTH_AVS           = NVL(IP_X_AUTH_AVS,X_AUTH_AVS),
    X_AUTH_RESPONSE      = NVL(IP_X_AUTH_RESPONSE,X_AUTH_RESPONSE),
    X_AUTH_TIME          = NVL(IP_X_AUTH_TIME,X_AUTH_TIME),
    X_AUTH_RCODE         = NVL(IP_X_AUTH_RCODE,X_AUTH_RCODE),
    X_AUTH_RFLAG         = NVL(IP_X_AUTH_RFLAG,X_AUTH_RFLAG),
    X_AUTH_RMSG          = NVL(IP_X_AUTH_RMSG,X_AUTH_RMSG),
    X_AUTH_AMOUNT        = NVL(IP_X_AUTH_AMOUNT,X_AUTH_AMOUNT),
    X_ICS_RCODE          = NVL(IP_X_ICS_RCODE,X_ICS_RCODE),
    X_ICS_RFLAG          = NVL(IP_X_ICS_RFLAG,X_ICS_RFLAG),
    X_ICS_RMSG           = NVL(IP_X_ICS_RMSG,X_ICS_RMSG),
    X_BILL_REQUEST_TIME  = NVL(IP_X_BILL_REQUEST_TIME,X_BILL_REQUEST_TIME),
    X_BILL_RCODE         = NVL(IP_X_BILL_RCODE,X_BILL_RCODE),
    X_BILL_RFLAG         = NVL(IP_X_BILL_RFLAG,X_BILL_RFLAG),
    X_BILL_RMSG          = NVL(IP_X_BILL_RMSG,X_BILL_RMSG),
    X_BILL_TRANS_REF_NO  = NVL(IP_X_BILL_TRANS_REF_NO,X_BILL_TRANS_REF_NO),
    X_BILL_AMOUNT        = NVL(IP_X_BILL_AMOUNT,X_BILL_AMOUNT),
    X_STATUS             = V_STATUS
   WHERE
    OBJID               = IP_X_PROGRAM_PURCH_HDR_OBJID;

   UPDATE X_CONTENT_PURCH_DTL DTL
   SET
    X_DELIVERY_STATUS       = V_STATUS
   WHERE
    X_CONTENT2PGM_PURCH_HDR = IP_X_PROGRAM_PURCH_HDR_OBJID;
  END IF;

  EXCEPTION
  WHEN OTHERS
  THEN
   OP_ERRORNUM :=  SQLCODE;
   OP_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
   INSERT
   INTO X_PROGRAM_ERROR_LOG(
    X_SOURCE,
    X_ERROR_CODE,
    X_ERROR_MSG,
    X_DATE,
    X_DESCRIPTION,
    X_SEVERITY
   ) VALUES (
    'SP_MOBILE_BILLING.UPDATE_PROGRAM_PURCH_HDR',
    OP_ERRORNUM,
    OP_ERRORMSG,
    SYSDATE,
    'SP_MOBILE_BILLING.UPDATE_PROGRAM_PURCH_HDR',
    2 -- MEDIUM
   );
  END;

/*=============== PROCEDURE UPDATE_PURCH_STATUS ===============*/
PROCEDURE UPDATE_PURCH_STATUS (
IP_X_STATUS      IN VARCHAR2,
IP_ORDER_ID           IN VARCHAR2,
OP_PURCH_ID      OUT VARCHAR2,
OP_ERRORNUM      OUT VARCHAR2,
OP_ERRORMSG      OUT VARCHAR2)IS

BEGIN
UPDATE X_PROGRAM_PURCH_HDR H SET
X_STATUS             = IP_X_STATUS
WHERE H.OBJID = (SELECT MAX(HDR.OBJID)
FROM X_PROGRAM_PURCH_HDR HDR, X_CONTENT_PURCH_DTL CNT
WHERE HDR.OBJID=CNT.X_CONTENT2PGM_PURCH_HDR
AND CNT.ORDER_ID=IP_ORDER_ID);

COMMIT;

SELECT X_CONTENT2PGM_PURCH_HDR INTO OP_PURCH_ID
FROM X_CONTENT_PURCH_DTL
WHERE ORDER_ID=IP_ORDER_ID;

COMMIT;
EXCEPTION
WHEN OTHERS
THEN
OP_ERRORNUM :=  SQLCODE;
OP_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
INSERT
INTO X_PROGRAM_ERROR_LOG(
X_SOURCE,
X_ERROR_CODE,
X_ERROR_MSG,
X_DATE,
X_DESCRIPTION,
X_SEVERITY
) VALUES (
'SP_MOBILE_BILLING.UPDATE_PURCH_STATUS',
OP_ERRORNUM,
OP_ERRORMSG,
SYSDATE,
'SP_MOBILE_BILLING.UPDATE_PURCH_STATUS',
2 -- MEDIUM
);
END ;

/*=============== PROCEDURE GET_SCRIPT_DETAILS ===============*/
PROCEDURE GET_SCRIPT_DETAILS(
IP_SCRIPT_VALUES IN VARCHAR2,
IP_LANGUAGE   IN VARCHAR2,
IP_SOURCESYSTEM  IN VARCHAR2,
OP_RESULT_SET  OUT SYS_REFCURSOR,
OP_ERRORNUM    OUT VARCHAR2,
OP_ERRORMSG    OUT VARCHAR2) IS
V1 VARCHAR2(4000);
V2 VARCHAR2(4000);
V3 VARCHAR2(4000);
V4 VARCHAR2(4000);
V5 VARCHAR2(4000);
V6 VARCHAR2(4000);
V7 VARCHAR2(4000);
BEGIN
OP_ERRORNUM := '0';
OP_ERRORMSG := '';

 BEGIN
 EXECUTE IMMEDIATE 'DROP TABLE SCRIPT1';
 EXECUTE IMMEDIATE 'DROP TABLE SCRIPT2';
 EXECUTE IMMEDIATE 'DROP TABLE SCRIPT3';
 EXCEPTION
 WHEN OTHERS THEN
 IF SQLCODE != -942 THEN
 RAISE;
 END IF;
 END;

 V1 := 'CREATE TABLE SCRIPT1(SCRIPT_VALUES VARCHAR2(4000),LANGUAGE VARCHAR2(10),SOURCESYSTEM VARCHAR2(10))';
 EXECUTE IMMEDIATE V1;
 V2 := 'CREATE TABLE SCRIPT2(SCRIPT_TYPE VARCHAR2(4000),SCRIPT_ID VARCHAR2(10),LANGUAGE VARCHAR2(10),SOURCESYSTEM VARCHAR2(10))';
 EXECUTE IMMEDIATE V2;
 V3 := 'CREATE TABLE SCRIPT3(SCRIPT_RESULT VARCHAR2(4000))';
 EXECUTE IMMEDIATE V3;
 V4 := Q'[INSERT INTO SCRIPT1(SCRIPT_VALUES,LANGUAGE,SOURCESYSTEM) SELECT REGEXP_SUBSTR(:1,'[^,]+', 1, LEVEL),:2,:3 FROM DUAL CONNECT BY REGEXP_SUBSTR(:4, '[^,]+', 1, LEVEL) IS NOT NULL]';
 EXECUTE IMMEDIATE V4 USING IP_SCRIPT_VALUES, IP_LANGUAGE, IP_SOURCESYSTEM, IP_SCRIPT_VALUES;
 --COMMIT;
 V5 := Q'{INSERT INTO SCRIPT2(SCRIPT_TYPE,SCRIPT_ID,LANGUAGE,SOURCESYSTEM) SELECT SUBSTR(SCRIPT_VALUES,1,INSTR(S.SCRIPT_VALUES,'_')-1),SUBSTR(SCRIPT_VALUES,INSTR(S.SCRIPT_VALUES,'_')+1),:1,:2 FROM SCRIPT1 S,DUAL D}';
 EXECUTE IMMEDIATE V5 USING IP_LANGUAGE, IP_SOURCESYSTEM;
 --COMMIT;
   V6 := Q'{INSERT INTO SCRIPT3(SCRIPT_RESULT) SELECT DISTINCT SCRIPT_TYPE || '_' || SCRIPT_ID || ',' || X_SCRIPT_TEXT FROM SCRIPT2 S,TABLE_X_SCRIPTS T WHERE S.SCRIPT_ID = T.X_SCRIPT_ID AND S.SCRIPT_TYPE = T.X_SCRIPT_TYPE AND S.LANGUAGE = T.X_LANGUAGE AND S.SOURCESYSTEM= T.X_SOURCESYSTEM}';
 EXECUTE IMMEDIATE V6;
 --COMMIT;
    V7 := Q'{SELECT SCRIPT_RESULT FROM SCRIPT3}';
 OPEN OP_RESULT_SET FOR V7;
 --COMMIT;

 BEGIN
 EXECUTE IMMEDIATE 'DROP TABLE SCRIPT1';
 EXECUTE IMMEDIATE 'DROP TABLE SCRIPT2';
 EXECUTE IMMEDIATE 'DROP TABLE SCRIPT3';
 EXCEPTION
 WHEN OTHERS THEN
 IF SQLCODE != -942 THEN
 RAISE;
 END IF;
 END;

 EXCEPTION
 WHEN OTHERS
 THEN
 OP_ERRORNUM := SQLCODE;
 OP_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
 INSERT INTO sa.TABLE_X_CBO_ERROR
 (OBJID,
 X_ESN_IMEI,
 X_SOURCE_SYSTEM,
 X_CBO_METHOD,
 X_ERROR_STRING,
 X_ERROR_DATE,
 X_PROMO_CODE,
 X_RED_CARD,
 X_ZIP_CODE)
 VALUES
 (sa.SEQ('X_CBO_ERROR'),
 NULL,
 'SP_MOBILE_BILLING',
 'GET_SCRIPT_DETAILS',
 OP_ERRORMSG,
 SYSDATE,
 NULL,
 NULL,
 NULL
 );
END;

PROCEDURE GET_MERCHANT_INFO (
IP_X_BUS_ORG   IN VARCHAR2,
OP_X_MERCHANT_ID   OUT VARCHAR2,
OP_NEXT_VALUE     OUT NUMBER,
OP_FORMAT         OUT VARCHAR2,
OP_ERRORNUM    OUT NUMBER,
OP_ERRORMSG    OUT VARCHAR2) IS
BEGIN
OP_ERRORNUM := '0';
OP_ERRORMSG := '';
SELECT X_MERCHANT_ID INTO OP_X_MERCHANT_ID
FROM TABLE_X_CC_PARMS
WHERE UPPER(X_BUS_ORG) = UPPER(IP_X_BUS_ORG)
AND ROWNUM < 2;

--SELECT SA.SEQU_X_MERCH_REF_ID.NEXTVAL
--INTO OP_NEXT_VALUE
--FROM DUAL;
--OP_FORMAT := '%i';

SELECT TO_CHAR(sysdate, 'YYYYMMDD')||sa.SEQU_MERCHANT_REF_NUMBER.NEXTVAL
INTO OP_NEXT_VALUE
FROM DUAL;
OP_FORMAT := '%i';

EXCEPTION
  WHEN OTHERS
  THEN
         OP_ERRORNUM := SQLCODE;
         OP_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
         INSERT INTO sa.X_PROGRAM_ERROR_LOG
   (X_SOURCE,
            X_ERROR_CODE,
            X_ERROR_MSG,
            X_DATE,
            X_DESCRIPTION,
            X_SEVERITY)
   VALUES
   ('SP_MOBILE_BILLING.GET_MERCHANT_INFO',
            OP_ERRORNUM,
            OP_ERRORMSG,
            SYSDATE,
            'SP_MOBILE_BILLING.GET_MERCHANT_INFO',
            2 -- MEDIUM
         );
END;

PROCEDURE GET_PART_NUMBER_BY_PRICE(
IP_NAME    IN VARCHAR2,
IP_S_ORG_ID   IN VARCHAR2,
IP_X_RETAIL_PRICE  IN VARCHAR2,
IP_PART_NUMBER  IN VARCHAR2,
OP_OBJID   OUT VARCHAR2,
OP_PART_NUMBER  OUT VARCHAR2,
OP_ERRORNUM    OUT VARCHAR2,
OP_ERRORMSG    OUT VARCHAR2) IS
V_PART_NUMBER   VARCHAR2(100);
BEGIN
 OP_ERRORNUM := '0';
 OP_ERRORMSG := '';
 V_PART_NUMBER := '%' || IP_PART_NUMBER || '%';
 SELECT TABLE_PART_NUM.OBJID ,TABLE_PART_NUM.PART_NUMBER INTO OP_OBJID, OP_PART_NUMBER
 FROM TABLE_PART_CLASS, TABLE_PART_NUM, TABLE_X_PRICING, TABLE_BUS_ORG
 WHERE TABLE_PART_CLASS.OBJID=TABLE_PART_NUM.PART_NUM2PART_CLASS
 AND TABLE_PART_NUM.OBJID = TABLE_X_PRICING.X_PRICING2PART_NUM
 AND TABLE_PART_NUM.PART_NUM2BUS_ORG = TABLE_BUS_ORG.OBJID
 AND UPPER(TABLE_PART_CLASS.NAME) = UPPER(IP_NAME)
 AND UPPER(TABLE_BUS_ORG.S_ORG_ID) = UPPER(IP_S_ORG_ID)
 AND TABLE_X_PRICING.X_RETAIL_PRICE= IP_X_RETAIL_PRICE
 AND PART_NUMBER LIKE V_PART_NUMBER;
 EXCEPTION
  WHEN OTHERS
  THEN
         OP_ERRORNUM := SQLCODE;
         OP_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
  INSERT INTO sa.TABLE_X_CBO_ERROR
  (OBJID,
  X_ESN_IMEI,
  X_SOURCE_SYSTEM,
  X_CBO_METHOD,
  X_ERROR_STRING,
  X_ERROR_DATE,
  X_PROMO_CODE,
  X_RED_CARD,
  X_ZIP_CODE)
  VALUES
  (sa.SEQ('X_CBO_ERROR'),
  NULL,
  'SP_MOBILE_BILLING',
  'GET_PART_NUMBER_BY_PRICE',
  OP_ERRORMSG,
  SYSDATE,
  NULL,
  NULL,
  NULL
  );
 END;

FUNCTION GET_OBJID_FROM_BUSORG (
IP_ORGID IN VARCHAR2
)
RETURN VARCHAR2
IS
V_OBJID VARCHAR2(255);
V_ERRORNUM VARCHAR2(255);
V_ERRORMSG VARCHAR2(4000);
BEGIN
 SELECT OBJID
 INTO V_OBJID
 FROM TABLE_BUS_ORG
 WHERE UPPER(ORG_ID) = UPPER(IP_ORGID);
 RETURN NVL(V_OBJID, 0);
EXCEPTION
WHEN OTHERS THEN
    V_ERRORNUM := SQLCODE;
    V_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
 INSERT INTO sa.TABLE_X_CBO_ERROR
 (OBJID,
 X_ESN_IMEI,
 X_SOURCE_SYSTEM,
 X_CBO_METHOD,
 X_ERROR_STRING,
 X_ERROR_DATE,
 X_PROMO_CODE,
 X_RED_CARD,
 X_ZIP_CODE)
 VALUES
 (sa.SEQ('X_CBO_ERROR'),
 NULL,
 'SP_MOBILE_BILLING',
 'GET_OBJID_FROM_BUSORG',
 V_ERRORMSG,
 SYSDATE,
 NULL,
 NULL,
 NULL
 );
  RETURN 0;
END;

FUNCTION GET_OBJID_FROM_CREDITCARD (
IP_X_CUSTOMER_CC_NUMBER  IN VARCHAR2,
IP_X_CREDIT_CARD2BUS_ORG IN VARCHAR2
)
RETURN VARCHAR2
IS
V_OBJID VARCHAR2(255);
V_ERRORNUM VARCHAR2(255);
V_ERRORMSG VARCHAR2(4000);
BEGIN
 SELECT OBJID INTO V_OBJID
 FROM TABLE_X_CREDIT_CARD
 WHERE UPPER(X_CARD_STATUS)='ACTIVE'
 AND X_CUSTOMER_CC_NUMBER = IP_X_CUSTOMER_CC_NUMBER
 AND X_CREDIT_CARD2BUS_ORG = IP_X_CREDIT_CARD2BUS_ORG;
 RETURN NVL(V_OBJID, 0);
EXCEPTION
WHEN OTHERS THEN
    V_ERRORNUM := SQLCODE;
    V_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
 INSERT INTO sa.TABLE_X_CBO_ERROR
 (OBJID,
 X_ESN_IMEI,
 X_SOURCE_SYSTEM,
 X_CBO_METHOD,
 X_ERROR_STRING,
 X_ERROR_DATE,
 X_PROMO_CODE,
 X_RED_CARD,
 X_ZIP_CODE)
 VALUES
 (sa.SEQ('X_CBO_ERROR'),
 NULL,
 'SP_MOBILE_BILLING',
 'GET_OBJID_FROM_CREDITCARD',
 V_ERRORMSG,
 SYSDATE,
 NULL,
 NULL,
 NULL
 );
  RETURN 0;
END;

FUNCTION GET_STATUS_FROM_CREDITCARD (
IP_X_CUSTOMER_CC_NUMBER  IN VARCHAR2,
IP_X_CREDIT_CARD2BUS_ORG IN VARCHAR2
)
RETURN VARCHAR2
IS
V_STATUS VARCHAR2(255);
V_ERRORNUM VARCHAR2(255);
V_ERRORMSG VARCHAR2(4000);
BEGIN
 SELECT X_CARD_STATUS INTO V_STATUS
 FROM TABLE_X_CREDIT_CARD
 WHERE X_CUSTOMER_CC_NUMBER = IP_X_CUSTOMER_CC_NUMBER
 AND X_CREDIT_CARD2BUS_ORG = IP_X_CREDIT_CARD2BUS_ORG;
 RETURN NVL(V_STATUS, 0);
EXCEPTION
WHEN OTHERS THEN
    V_ERRORNUM := SQLCODE;
    V_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
 INSERT INTO sa.TABLE_X_CBO_ERROR
 (OBJID,
 X_ESN_IMEI,
 X_SOURCE_SYSTEM,
 X_CBO_METHOD,
 X_ERROR_STRING,
 X_ERROR_DATE,
 X_PROMO_CODE,
 X_RED_CARD,
 X_ZIP_CODE)
 VALUES
 (sa.SEQ('X_CBO_ERROR'),
 NULL,
 'SP_MOBILE_BILLING',
 'GET_OBJID_FROM_CREDITCARD',
 V_ERRORMSG,
 SYSDATE,
 NULL,
 NULL,
 NULL
 );
  RETURN 0;
END;

FUNCTION GET_OBJID_FROM_CERT (
IP_X_CERT  IN VARCHAR2,
IP_X_KEY_ALGO IN VARCHAR2,
IP_X_CC_ALGO IN VARCHAR2
)
RETURN VARCHAR2
IS
V_OBJID VARCHAR2(255);
V_ERRORNUM VARCHAR2(255);
V_ERRORMSG VARCHAR2(4000);
BEGIN
 SELECT OBJID INTO V_OBJID
 FROM X_CERT
 WHERE X_CERT = IP_X_CERT
 AND X_KEY_ALGO = IP_X_KEY_ALGO
 AND X_CC_ALGO = IP_X_CC_ALGO;
 RETURN NVL(V_OBJID, 0);
EXCEPTION
WHEN OTHERS THEN
    V_ERRORNUM := SQLCODE;
    V_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
 INSERT INTO sa.TABLE_X_CBO_ERROR
 (OBJID,
 X_ESN_IMEI,
 X_SOURCE_SYSTEM,
 X_CBO_METHOD,
 X_ERROR_STRING,
 X_ERROR_DATE,
 X_PROMO_CODE,
 X_RED_CARD,
 X_ZIP_CODE)
 VALUES
 (sa.SEQ('X_CBO_ERROR'),
 NULL,
 'SP_MOBILE_BILLING',
 'GET_OBJID_FROM_CERT',
 V_ERRORMSG,
 SYSDATE,
 NULL,
 NULL,
 NULL
 );
  RETURN 0;
END;

FUNCTION GET_OBJID_FROM_PAYMENTSOURCE (
IP_PYMT_SRC2X_CREDIT_CARD IN VARCHAR2,
IP_PYMT_SRC2WEB_USER  IN VARCHAR2
)
RETURN VARCHAR2
IS
V_OBJID VARCHAR2(255);
V_ERRORNUM VARCHAR2(255);
V_ERRORMSG VARCHAR2(4000);
BEGIN
 SELECT OBJID INTO V_OBJID
 FROM X_PAYMENT_SOURCE
 WHERE UPPER(X_STATUS)='ACTIVE'
 AND PYMT_SRC2X_CREDIT_CARD = IP_PYMT_SRC2X_CREDIT_CARD
 AND NVL(PYMT_SRC2WEB_USER,0) = NVL(IP_PYMT_SRC2WEB_USER,0)
 ORDER BY OBJID DESC;
 RETURN NVL(V_OBJID, 0);
EXCEPTION
WHEN OTHERS THEN
    V_ERRORNUM := SQLCODE;
    V_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
 INSERT INTO sa.TABLE_X_CBO_ERROR
 (OBJID,
 X_ESN_IMEI,
 X_SOURCE_SYSTEM,
 X_CBO_METHOD,
 X_ERROR_STRING,
 X_ERROR_DATE,
 X_PROMO_CODE,
 X_RED_CARD,
 X_ZIP_CODE)
 VALUES
 (sa.SEQ('X_CBO_ERROR'),
 NULL,
 'SP_MOBILE_BILLING',
 'GET_OBJID_FROM_PAYMENTSOURCE',
 V_ERRORMSG,
 SYSDATE,
 NULL,
 NULL,
 NULL
 );
  RETURN 0;
END;

FUNCTION CHECK_MTM_CONTACT_CREDIT_CARD (
MTM_CONTACT_ID IN VARCHAR2,
MTM_CREDIT_CARD_ID  IN VARCHAR2
)
RETURN VARCHAR2
IS
V_COUNT NUMBER;
V_ERRORNUM VARCHAR2(255);
V_ERRORMSG VARCHAR2(4000);
BEGIN
 SELECT COUNT(*)
  INTO V_COUNT
  FROM MTM_CONTACT46_X_CREDIT_CARD3
 WHERE MTM_CONTACT2X_CREDIT_CARD=MTM_CONTACT_ID
 AND MTM_CREDIT_CARD2CONTACT = MTM_CREDIT_CARD_ID  ;
 RETURN NVL(V_COUNT, 0);
EXCEPTION
WHEN OTHERS THEN
    V_ERRORNUM := SQLCODE;
    V_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
 INSERT INTO sa.TABLE_X_CBO_ERROR
 (OBJID,
 X_ESN_IMEI,
 X_SOURCE_SYSTEM,
 X_CBO_METHOD,
 X_ERROR_STRING,
 X_ERROR_DATE,
 X_PROMO_CODE,
 X_RED_CARD,
 X_ZIP_CODE)
 VALUES
 (sa.SEQ('X_CBO_ERROR'),
 NULL,
 'SP_MOBILE_BILLING',
 'CHECK_MTM_CONTACT_CREDIT_CARD',
 V_ERRORMSG,
 SYSDATE,
 NULL,
 NULL,
 NULL
 );
  RETURN 0;
END;



PROCEDURE GET_CREDIT_CARD_REQUEST_INFO (
IP_CC_OBJID    IN VARCHAR2,
OP_RESULT_SET   OUT SYS_REFCURSOR,
OP_ERRORNUM    OUT VARCHAR2,
OP_ERRORMSG    OUT VARCHAR2) IS
BEGIN
 OP_ERRORNUM := '0';
 OP_ERRORMSG := '';
 OPEN OP_RESULT_SET FOR
 SELECT
 TXCC.OBJID AS CREDIT_CARD_OBJID,
 TXCC.X_CUSTOMER_CC_NUMBER,
 TXCC.X_CUSTOMER_CC_EXPMO,
 TXCC.X_CUSTOMER_CC_EXPYR,
 TXCC.X_CUSTOMER_CC_CV_NUMBER,
 TXCC.X_CC_TYPE,
 TXCC.X_CUSTOMER_FIRSTNAME,
 TXCC.X_CUSTOMER_LASTNAME,
 TXCC.X_CUSTOMER_PHONE,
 TXCC.X_CUSTOMER_EMAIL,
 TXCC.X_MAX_PURCH_AMT,
 TXCC.X_MAX_TRANS_PER_MONTH,
 TXCC.X_MAX_PURCH_AMT_PER_MONTH,
 TXCC.X_CHANGEDATE,
 TXCC.X_ORIGINAL_INSERT_DATE,
 TXCC.X_CHANGEDBY,
 TXCC.X_CC_COMMENTS,
 TXCC.X_MOMS_MAIDEN,
 TXCC.X_CREDIT_CARD2CONTACT,
 TXCC.X_CREDIT_CARD2ADDRESS,
 TXCC.X_CARD_STATUS,
 TXCC.X_MAX_ILD_PURCH_AMT,
 TXCC.X_MAX_ILD_PURCH_MONTH,
 TXCC.X_CREDIT_CARD2BUS_ORG,
 TXCC.X_CUST_CC_NUM_KEY,
 TXCC.X_CUST_CC_NUM_ENC,
 TXCC.CREDITCARD2CERT,
 XC.OBJID AS XCERTOBJID,
 XC.X_CERT,
 XC.X_KEY_ALGO,
 XC.X_CC_ALGO
 FROM TABLE_X_CREDIT_CARD TXCC
 INNER JOIN X_CERT XC ON XC.OBJID = TXCC.CREDITCARD2CERT
 WHERE TXCC.OBJID = IP_CC_OBJID;
 --INNER JOIN X_PAYMENT_SOURCE x ON PS.PYMT_SRC2X_CREDIT_CARD = TXCC.OBJID
 --WHERE PS.OBJID = IP_PAYMENT_SOURCE_OBJID;

 EXCEPTION
 WHEN OTHERS
 THEN
 OP_ERRORNUM := SQLCODE;
 OP_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
 INSERT INTO sa.TABLE_X_CBO_ERROR
 (OBJID,
 X_ESN_IMEI,
 X_SOURCE_SYSTEM,
 X_CBO_METHOD,
 X_ERROR_STRING,
 X_ERROR_DATE,
 X_PROMO_CODE,
 X_RED_CARD,
 X_ZIP_CODE)
 VALUES
 (sa.SEQ('X_CBO_ERROR'),
 NULL,
 'SP_MOBILE_BILLING',
 'GET_CREDIT_CARD_REQUEST_INFO',
 OP_ERRORMSG,
 SYSDATE,
 NULL,
 NULL,
 NULL
 );
END;

FUNCTION INSERT_PAYMENT_SOURCE (
IP_X_PYMT_SRC_NAME   IN VARCHAR2,
IP_PYMT_SRC2WEB_USER  IN VARCHAR2,
IP_PYMT_SRC2X_CREDIT_CARD IN VARCHAR2,
IP_X_SOURCESYSTEM   IN VARCHAR2
)
RETURN VARCHAR2
IS
V_ID_NUMBER NUMBER;
V_ERRORNUM VARCHAR2(255);
V_ERRORMSG VARCHAR2(4000);

BEGIN
SELECT sa.BILLING_SEQ('X_PAYMENT_SOURCE')
INTO V_ID_NUMBER
FROM DUAL;
INSERT INTO X_PAYMENT_SOURCE (
OBJID,
X_PYMT_TYPE,
X_PYMT_SRC_NAME,
PYMT_SRC2WEB_USER,
PYMT_SRC2X_CREDIT_CARD,
X_STATUS,
X_INSERT_DATE,
X_SOURCESYSTEM
)
VALUES
(
V_ID_NUMBER,
'CREDITCARD',
IP_X_PYMT_SRC_NAME,
IP_PYMT_SRC2WEB_USER,
IP_PYMT_SRC2X_CREDIT_CARD,
'ACTIVE',
SYSDATE,
IP_X_SOURCESYSTEM
);
COMMIT;
RETURN NVL(V_ID_NUMBER, 0);
 EXCEPTION
 WHEN OTHERS
 THEN
 V_ERRORNUM := SQLCODE;
 V_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
 INSERT INTO sa.X_PROGRAM_ERROR_LOG
 (X_SOURCE,
 X_ERROR_CODE,
 X_ERROR_MSG,
 X_DATE,
 X_DESCRIPTION,
 X_SEVERITY)
 VALUES
 ('SP_MOBILE_BILLING.GET_CREDIT_CARD_REQUEST_INFO',
 V_ERRORNUM,
 V_ERRORMSG,
 SYSDATE,
 'SP_MOBILE_BILLING.GET_CREDIT_CARD_REQUEST_INFO',
 2 -- MEDIUM
 );
RETURN 0;
END;

FUNCTION INSERT_CREDIT_CARD (
IP_X_CUSTOMER_CC_NUMBER   IN VARCHAR2,
IP_X_CUSTOMER_CC_EXPMO   IN VARCHAR2,
IP_X_CUSTOMER_CC_EXPYR   IN VARCHAR2,
IP_X_CC_TYPE     IN VARCHAR2,
IP_X_CUSTOMER_CC_CV_NUMBER  IN VARCHAR2,
IP_X_CUSTOMER_FIRSTNAME   IN VARCHAR2,
IP_X_CUSTOMER_LASTNAME   IN VARCHAR2,
IP_X_CUSTOMER_PHONE    IN VARCHAR2,
IP_X_CUSTOMER_EMAIL    IN VARCHAR2,
IP_X_CREDIT_CARD2CONTACT  IN VARCHAR2,
IP_X_CREDIT_CARD2ADDRESS  IN VARCHAR2,
IP_X_CREDIT_CARD2BUS_ORG  IN VARCHAR2,
IP_X_CUST_CC_NUM_KEY   IN VARCHAR2,
IP_X_CUST_CC_NUM_ENC   IN VARCHAR2,
IP_CREDITCARD2CERT    IN VARCHAR2)
RETURN VARCHAR2
IS
V_ID_NUMBER NUMBER;
V_ERRORNUM VARCHAR2(255);
V_ERRORMSG VARCHAR2(4000);
BEGIN
SELECT sa.SEQ('X_CREDIT_CARD')
INTO V_ID_NUMBER
FROM DUAL;
INSERT INTO TABLE_X_CREDIT_CARD (
OBJID,
X_CUSTOMER_CC_NUMBER,
X_CUSTOMER_CC_EXPMO,
X_CUSTOMER_CC_EXPYR,
X_CC_TYPE,
--X_CUSTOMER_CC_CV_NUMBER,
X_CUSTOMER_FIRSTNAME,
X_CUSTOMER_LASTNAME,
X_CUSTOMER_PHONE,
X_CUSTOMER_EMAIL,
X_ORIGINAL_INSERT_DATE,
X_CREDIT_CARD2CONTACT,
X_CREDIT_CARD2ADDRESS,
X_CARD_STATUS,
X_CREDIT_CARD2BUS_ORG,
X_CUST_CC_NUM_KEY,
X_CUST_CC_NUM_ENC,
CREDITCARD2CERT
)
VALUES
(
V_ID_NUMBER,
IP_X_CUSTOMER_CC_NUMBER,
IP_X_CUSTOMER_CC_EXPMO,
IP_X_CUSTOMER_CC_EXPYR,
IP_X_CC_TYPE,
--IP_X_CUSTOMER_CC_CV_NUMBER,
IP_X_CUSTOMER_FIRSTNAME,
IP_X_CUSTOMER_LASTNAME,
IP_X_CUSTOMER_PHONE,
IP_X_CUSTOMER_EMAIL,
SYSDATE,
IP_X_CREDIT_CARD2CONTACT,
IP_X_CREDIT_CARD2ADDRESS,
'ACTIVE',
IP_X_CREDIT_CARD2BUS_ORG,
IP_X_CUST_CC_NUM_KEY,
IP_X_CUST_CC_NUM_ENC,
IP_CREDITCARD2CERT
);
COMMIT;
RETURN NVL(V_ID_NUMBER, 0);
EXCEPTION
WHEN OTHERS
THEN
    V_ERRORNUM := SQLCODE;
    V_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
 INSERT INTO sa.TABLE_X_CBO_ERROR
 (OBJID,
 X_ESN_IMEI,
 X_SOURCE_SYSTEM,
 X_CBO_METHOD,
 X_ERROR_STRING,
 X_ERROR_DATE,
 X_PROMO_CODE,
 X_RED_CARD,
 X_ZIP_CODE)
 VALUES
 (sa.SEQ('X_CBO_ERROR'),
 NULL,
 'SP_MOBILE_BILLING',
 'INSERT_CREDIT_CARD',
 V_ERRORMSG,
 SYSDATE,
 NULL,
 NULL,
 NULL
 );
RETURN 0;
END;


PROCEDURE ADD_PAYMENT_CREDITCARD_DETAILS (
IP_WEBUSER_OBJID    IN VARCHAR2,
IP_TPI_ESN      IN VARCHAR2,
IP_BRAND_NAME     IN VARCHAR2,
IP_X_PYMT_TYPE     IN VARCHAR2,
IP_X_PYMT_SRC_NAME    IN VARCHAR2,
IP_X_SOURCESYSTEM    IN VARCHAR2,
IP_X_CUSTOMER_CC_NUMBER   IN VARCHAR2,
IP_X_CUSTOMER_CC_EXPMO   IN VARCHAR2,
IP_X_CUSTOMER_CC_EXPYR   IN VARCHAR2,
IP_X_CC_TYPE     IN VARCHAR2,
IP_X_CUSTOMER_CC_CV_NUMBER  IN VARCHAR2,
IP_X_CUSTOMER_PHONE    IN VARCHAR2,
IP_X_CUST_CC_NUM_KEY   IN VARCHAR2,
IP_X_CUST_CC_NUM_ENC   IN VARCHAR2,
IP_X_CERT      IN VARCHAR2,
IP_X_KEY_ALGO     IN VARCHAR2,
IP_X_CC_ALGO     IN VARCHAR2,
OP_RESULT_SET     OUT VARCHAR2,
OP_CONTACT_OBJID    OUT VARCHAR2,
OP_CC_OBJID      OUT VARCHAR2,
OP_PS_OBJID      OUT VARCHAR2,
OP_ERRORNUM      OUT VARCHAR2,
OP_ERRORMSG      OUT VARCHAR2) IS

V_CONTACT_OBJID     VARCHAR2(255);
V_FIRSTNAME      VARCHAR2(255);
V_LASTNAME      VARCHAR2(255);
V_EMAIL       VARCHAR2(255);
V_ADDRESS1      VARCHAR2(255);
V_ADDRESS2      VARCHAR2(255);
V_CITY       VARCHAR2(255);
V_STATE       VARCHAR2(255);
V_ZIPCODE      VARCHAR2(255);
V_ADDRESS_OBJID     VARCHAR2(255);
V_RESULT      VARCHAR2(255);
V_BUS_ORG_ID     VARCHAR2(255);
V_CC_OBJID      VARCHAR2(255);
V_PS_OBJID      VARCHAR2(255);
V_CERT_OBJID     VARCHAR2(255);
V_CHECK_MTM           VARCHAR2(255);
V_STATUS              VARCHAR2(255);
V_IP_BRAND_NAME       VARCHAR2(255);
/*
possible scenarios
1: new credit card with existing web user objid
2: new credit card with OUT existing web user objid
3: existing credit card with existing web user objid, having NO record in x_payment_source
4: existing credit card with existing web user objid, having record in x_payment_source
5: existing credit card with OUT existing web user objid
*/
BEGIN
 -- If  web user OBJID exists, get contact from WU
 IF IP_WEBUSER_OBJID IS NOT NULL THEN
  SELECT WEB_USER2CONTACT
  INTO V_CONTACT_OBJID
  FROM TABLE_WEB_USER
  WHERE OBJID = IP_WEBUSER_OBJID;
 ELSE -- If web user OBJID not exists, get contact from ESN
  SELECT X_PART_INST2CONTACT
  INTO V_CONTACT_OBJID
  FROM TABLE_PART_INST
  WHERE PART_SERIAL_NO = IP_TPI_ESN;
 END IF;

 -- If contact OBJID exists, Retrieve the Address
 IF V_CONTACT_OBJID IS NOT NULL THEN
  SELECT TC.FIRST_NAME,TC.LAST_NAME,TC.E_MAIL,TC.ADDRESS_1,TC.ADDRESS_2,TC.CITY,TC.STATE,TC.ZIPCODE,NVL(NVL(TS.CUST_PRIMADDR2ADDRESS,TS.CUST_BILLADDR2ADDRESS),TS.CUST_SHIPADDR2ADDRESS)
  INTO V_FIRSTNAME,V_LASTNAME,V_EMAIL,V_ADDRESS1,V_ADDRESS2,V_CITY,V_STATE,V_ZIPCODE,V_ADDRESS_OBJID
  FROM TABLE_CONTACT TC, TABLE_CONTACT_ROLE TCR, TABLE_SITE TS
  WHERE TC.OBJID = V_CONTACT_OBJID
  AND TC.OBJID = TCR.CONTACT_ROLE2CONTACT
  AND TCR.CONTACT_ROLE2SITE = TS.OBJID
  AND ROWNUM = 1 ;
  OP_CONTACT_OBJID := V_CONTACT_OBJID;
 ELSE --If contact OBJID NOT exists ?
      OP_ERRORMSG := 'CONTACT OBJID NOT FOUND IN TABLE_WEB_USER AND TABLE_PART_INST';
      RETURN;
 END IF;

 -- Check if Credit Card exists or not
 -- GET OBJID FROM BUSORG

 -- Added to fetch the Brand_name based on ESN
  SELECT    tbus.org_id into V_IP_BRAND_NAME FROM     sa.table_part_inst   tpiesn ,
   sa.TABLE_MOD_LEVEL     tmodel,
   sa.TABLE_PART_NUM      tpn,
   sa.table_bus_org       tbus
   WHERE    tpiesn.n_part_inst2part_mod =    tmodel.objid
   AND      tmodel.part_info2part_num = tpn.objid
   and      tpn.part_num2bus_org = tbus.objid
   AND      tpiesn.part_serial_no  = IP_TPI_ESN;

  V_BUS_ORG_ID := GET_OBJID_FROM_BUSORG(V_IP_BRAND_NAME);

 IF V_BUS_ORG_ID IS NULL OR V_BUS_ORG_ID = 0 THEN
    OP_ERRORMSG := 'NO ROWS FOUND IN TABLE_BUS_ORG [' || V_IP_BRAND_NAME || ']';
      RETURN;
 ELSE
    --GET Status from credit card---
    V_STATUS := GET_STATUS_FROM_CREDITCARD(IP_X_CUSTOMER_CC_NUMBER,V_BUS_ORG_ID);

    IF V_STATUS = 'BLACKLIST' THEN
       OP_ERRORMSG := 'CARD IS BLACKLISTED, USE NEW CREDIT CARD';
        RETURN;
    ELSIF V_STATUS = 'INACTIVE' THEN
        V_STATUS := UPDATE_CARD_STATUS(IP_X_CUSTOMER_CC_NUMBER,V_STATUS);
        V_CC_OBJID := GET_OBJID_FROM_CREDITCARD(IP_X_CUSTOMER_CC_NUMBER,V_BUS_ORG_ID);
        OP_CC_OBJID := V_CC_OBJID;
        --RETURN;
    ELSIF V_STATUS = 'ACTIVE' THEN
        OP_RESULT_SET := 'CARD IS ALREADY USED';
        V_CC_OBJID := GET_OBJID_FROM_CREDITCARD(IP_X_CUSTOMER_CC_NUMBER,V_BUS_ORG_ID);
        OP_CC_OBJID := V_CC_OBJID;
        --RETURN;
    END IF;

  --If Credit Card Not Exists
  IF V_CC_OBJID IS NULL OR V_CC_OBJID = 0 THEN
   OP_RESULT_SET := 'NO ROWS FOUND IN TABLE_X_CREDIT_CARD';
   -- GETTING CERT OBJID
   V_CERT_OBJID := GET_OBJID_FROM_CERT(IP_X_CERT,IP_X_KEY_ALGO,IP_X_CC_ALGO);

   IF V_CERT_OBJID IS NULL OR V_CERT_OBJID = 0 THEN
         OP_ERRORMSG  := 'NO ROWS FOUND IN X_CERT';
        RETURN;
   ELSE
    --INSERTING CC INFO
    V_CC_OBJID := INSERT_CREDIT_CARD(IP_X_CUSTOMER_CC_NUMBER,IP_X_CUSTOMER_CC_EXPMO,IP_X_CUSTOMER_CC_EXPYR,IP_X_CC_TYPE,IP_X_CUSTOMER_CC_CV_NUMBER,V_FIRSTNAME,V_LASTNAME,IP_X_CUSTOMER_PHONE,V_EMAIL,V_CONTACT_OBJID,V_ADDRESS_OBJID,V_BUS_ORG_ID,IP_X_CUST_CC_NUM_KEY,IP_X_CUST_CC_NUM_ENC,V_CERT_OBJID);

    IF V_CC_OBJID IS NULL OR V_CC_OBJID = 0 THEN
          OP_ERRORMSG  :=  'UNABLE TO INSERT INTO TABLE_X_CREDIT_CARD';
          RETURN;
    END IF;
   END IF;
  END IF;
  OP_CC_OBJID := V_CC_OBJID;
 END IF;

-- If web user OBJID exists or not, insert into Payment Source
 IF (V_CC_OBJID IS NOT NULL AND V_CC_OBJID != 0) THEN
  -- GET OBJID FROM PAYMENT SOURCE
  V_PS_OBJID := GET_OBJID_FROM_PAYMENTSOURCE(V_CC_OBJID,IP_WEBUSER_OBJID);
  -- If Payment OBJID not exists
  IF V_PS_OBJID IS NULL OR V_PS_OBJID = 0 THEN
   --INSERTING PAYMENT SOURCE
   V_PS_OBJID := INSERT_PAYMENT_SOURCE(IP_X_PYMT_SRC_NAME,IP_WEBUSER_OBJID,V_CC_OBJID,IP_X_SOURCESYSTEM);
   -- If Payment OBJID is null
   IF V_PS_OBJID IS NULL OR V_PS_OBJID = 0 THEN
    OP_ERRORMSG := 'UNABLE TO INSERT INTO X_PAYMENT_SOURCE';
            RETURN;
   END IF;
  END IF;
  OP_PS_OBJID := V_PS_OBJID;
 END IF;

 -- If web user OBJID not exists, insert into MTM table
  V_CHECK_MTM := CHECK_MTM_CONTACT_CREDIT_CARD(V_CONTACT_OBJID,V_CC_OBJID);
 IF (IP_WEBUSER_OBJID IS NULL AND V_CONTACT_OBJID IS NOT NULL AND V_CC_OBJID IS NOT NULL AND V_CHECK_MTM = 0 ) THEN
  INSERT INTO MTM_CONTACT46_X_CREDIT_CARD3 (MTM_CONTACT2X_CREDIT_CARD,MTM_CREDIT_CARD2CONTACT) VALUES (V_CONTACT_OBJID,V_CC_OBJID);
 END IF;

EXCEPTION
  WHEN OTHERS
  THEN
  OP_ERRORNUM := SQLCODE;
  OP_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
  INSERT INTO sa.TABLE_X_CBO_ERROR
  (OBJID,
  X_ESN_IMEI,
  X_SOURCE_SYSTEM,
  X_CBO_METHOD,
  X_ERROR_STRING,
  X_ERROR_DATE,
  X_PROMO_CODE,
  X_RED_CARD,
  X_ZIP_CODE)
  VALUES
  (sa.SEQ('X_CBO_ERROR'),
  NULL,
  'SP_MOBILE_BILLING',
  'ADD_PAYMENT_CREDITCARD_DETAILS',
  OP_ERRORMSG,
  SYSDATE,
  NULL,
  NULL,
  NULL
  );
END;

PROCEDURE CALCTAX_VAS(
IP_ZIP_CODE    IN VARCHAR2,
IP_PURCHASE_AMOUNT  IN NUMBER,
IP_MODEL_TYPE   IN VARCHAR2,
OP_PURCHASE_AMOUNT  OUT NUMBER,
OP_MODEL_TAX_PERCENTAGE OUT NUMBER,
OP_TAX_AMOUNT   OUT NUMBER,
OP_TOTAL_AMOUNT   OUT NUMBER,
OP_RESULT    OUT VARCHAR2)IS
--OP_ERRORNUM    OUT VARCHAR2,
--OP_ERRORMSG    OUT VARCHAR2) IS
V_ZIP_CODE VARCHAR2(10);
V_MODEL_TAX NUMBER;
OP_ERRORNUM VARCHAR2(100);
OP_ERRORMSG VARCHAR2(100);
BEGIN
  OP_RESULT   := '';
  V_ZIP_CODE  := '';
  V_MODEL_TAX := 0;
  SELECT X_ZIP INTO V_ZIP_CODE
  FROM TABLE_X_ZIP_CODE
  WHERE X_ZIP = IP_ZIP_CODE;

 IF V_ZIP_CODE IS NULL OR V_ZIP_CODE = '' THEN
  OP_RESULT := 'NO DATA FOUND FOR ZIP CODE';
 ELSE
  V_MODEL_TAX := SP_TAXES.COMPUTEMODELTAX(IP_ZIP_CODE,IP_MODEL_TYPE);
  OP_MODEL_TAX_PERCENTAGE := V_MODEL_TAX;
  OP_TAX_AMOUNT := ROUND(V_MODEL_TAX * IP_PURCHASE_AMOUNT, 2);
  OP_TOTAL_AMOUNT := IP_PURCHASE_AMOUNT + OP_TAX_AMOUNT;
  OP_RESULT := 'SUCCESS';
 END IF;
 OP_PURCHASE_AMOUNT := IP_PURCHASE_AMOUNT;
EXCEPTION
WHEN NO_DATA_FOUND THEN
OP_RESULT := 'NO DATA FOUND FOR ZIP CODE';
WHEN OTHERS THEN
  OP_RESULT := 'ERROR';
  OP_ERRORNUM := SQLCODE;
  OP_ERRORMSG := SQLCODE || SUBSTR (SQLERRM, 1, 100);
  INSERT
  INTO X_PROGRAM_ERROR_LOG
    (
      X_SOURCE,
      X_ERROR_CODE,
      X_ERROR_MSG,
      X_DATE,
      X_DESCRIPTION,
      X_SEVERITY
    )
    VALUES
    (
      'SP_TAXES.CALCTAX_VAS',
      OP_ERRORNUM,
      OP_ERRORMSG,
      SYSDATE,
      'SP_TAXES.CALCTAX_VAS',
      2 -- MEDIUM
    );
END;

END SP_MOBILE_BILLING;
-- ANTHILL_TEST PLSQL/SA/PackageBodies/SP_MOBILE_BILLING_PKG_BODY.sql  CR31367: 1.16

-- ANTHILL_TEST PLSQL/SA/PackageBodies/SP_MOBILE_BILLING_PKG_BODY.sql  CR31367: 1.18
/